//SparkContext object

sc
//SparkSession object

spark

//Rdd Creation
val rdd = sc.parallelize(List(1,2,3,4))
rdd.first()
val mutl_rdd = rdd.map(x => x*x)
mutl_rdd.collect()
val sum_of_rdd = rdd.map(x => x * x).reduce((x,y)=>x+y)
val sum_of_rdd = rdd.map(x => x * x).reduce(_+_)

//Filter Transformation

val rdd_a = sc.parallelize(1 to 10, 3)
val rdd_b = rdd_a.filter(x => x % 3 == 0)
rdd_b.collect()

val rdd_a = sc.parallelize(1 to 10, 3)
val rdd_b = rdd_a.filter(_ % 3 == 0)
rdd_b.collect()

//Distinct Transformation

val rdd_c = sc.parallelize(List("John", "Jack", "Mike", "Jack"))
val dist_rdd = rdd_c.distinct()
dist_rdd.collect()

//Intersection Transformation

val rdd_x = sc.parallelize(1 to 10)
val rdd_y = sc.parallelize(5 to 15)
val rdd_z = rdd_x.intersection(rdd_y)
rdd_z.collect

//Union Transformation

val rdd_a = sc.parallelize(3 to 7, 1)
val rdd_b = sc.parallelize(7 to 9, 1)
val rdd_c = rdd_a.union(rdd_b)
rdd_c.collect()

//map Transformation

val rdd_a = sc.parallelize(List("animal", "human", "bird", "rat"), 3)
//val rdd_b = rdd_a.map(x =>x.length)
val rdd_b = rdd_a.map(_.length)
val rdd_c = rdd_a.zip(rdd_b)
rdd_c.collect

//map & flatMap difference

val rdd_a = sc.parallelize(1 to 5, 4)
//val map_rdd = rdd_a.map(x =>1 to x)
val map_rdd = rdd_a.map(1 to _)
map_rdd.collect
val flat_map = rdd_a.flatMap(1 to _)
flat_map.collect()

sc.parallelize(List(5, 10, 20), 2).map(x => List(x, x, x)).collect
sc.parallelize(List(5, 10, 20), 2).flatMap(x => List(x, x, x)).collect

//keys

val rdd_a = sc.parallelize(List("black", "blue", "white", "green", "grey"), 2)
val rdd_b = rdd_a.map(x => (x.length, x))
rdd_b.keys.collect

//cartesian Transformation

val rdd_x = sc.parallelize(List(1,2,3))
val rdd_y = sc.parallelize(List(10,11,12))
rdd_x.cartesian(rdd_y).collect


// groupByKey Transformation

val rdd_a = sc.parallelize(List("black", "blue", "white", "green", "grey"), 2)
//val rdd_b = rdd_a.keyBy(x => x.length)
val rdd_b = rdd_a.keyBy(_.length)
rdd_b.collect()
rdd_b.groupByKey.collect

//join Transformation

val rdd_a = sc.parallelize(List("blue", "green", "orange"), 3)
//val rdd_b = rdd_a.keyBy(x => x.length)
val rdd_b = rdd_a.keyBy(_.length)
rdd_b.collect()

val rdd_c = sc.parallelize(List("black", "white", "grey"), 3)
val rdd_d = rdd_c.keyBy(_.length)
rdd_d.collect()

val join_rdd = rdd_b.join(rdd_d)
join_rdd.collect
rdd_b.leftOuterJoin(rdd_d).collect()
rdd_b.rightOuterJoin(rdd_d).collect()
rdd_b.fullOuterJoin(rdd_d).collect()

//reduceByKey Transformation

val rdd_a = sc.parallelize(List("black", "blue", "white", "green", "grey"), 2)
val rdd_b = rdd_a.map(x => (x.length, x))
rdd_b.collect()

//val reduce_by_key_result = rdd_b.reduceByKey((x,y) => x+y)
val reduce_by_key_result = rdd_b.reduceByKey(_ + _)
reduce_by_key_result.collect()

val rdd_a = sc.parallelize(List("black", "blue", "white", "orange"), 2)
val rdd_b = rdd_a.map(x => (x.length, x))
rdd_b.collect()
rdd_b.reduceByKey(_ + _).collect


//Actions
sc.parallelize(List(2, 3, 4)).count()
sc.parallelize(List(2, 3, 4)).first()
sc.parallelize(List(2, 3, 4)).take(2)
